version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --region us-east-1 --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --region us-east-1 --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws --region us-west-2 s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test front-end
          command: | 
            cd frontend 
            npm install 
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout 
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test backend
          command: |
            cd backend
            npm install 
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout 
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: scan frontend 
          command: |
            cd frontend 
            npm install 
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout 
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: scan backend 
          command: |
            cd backend 
            npm install 
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
            
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: yum -y install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --region us-east-1 \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-infra
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --region us-east-1 \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend-infra
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-infra" \
              --output text)
              echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
              
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprint: ['3b:84:ae:d2:60:e4:f4:28:aa:72:90:e3:65:b9:23:80']
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            ansible --version
      - run:
          name: Configure server
          command: |
            pwd &&
            ls -la 
            cat inventory.txt 
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
        - image: circleci/node:13.8.0
    steps:
      - checkout 
      - attach_workspace:
          at: . 
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install 
              npm run migrations > migrations_dump.txt 
            # Your code here
            #exit 1
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
               # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
               #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
               # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
               curl https://kvdb.io/G3uxHm9gAhAio27b61q5aC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      

  #deploy-frontend:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #          export API_URL="http://${BACKEND_IP}:3030"
  #          echo "${API_URL}"
  #    - run:
  #        name: Deploy frontend objects
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
  #  docker:
  #    # Docker image here that supports Ansible
  #  steps:
  #    # Checkout code from git
  #    # Add ssh keys with fingerprint
  #    # attach workspace
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Deploy backend
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

  #smoke-test:
  #  docker:
  #    # Lightweight Docker image 
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #    - run:
  #        name: Backend smoke test.
  #        command: |
  #          # your code here
  #    - run:
  #        name: Frontend smoke test.
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
    #      filters:
    #        branches:
    #          only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
    #  - deploy-frontend:
    #      requires: [run-migrations]
    #  - deploy-backend:
    #      requires: [run-migrations]
    #  - smoke-test:
    #      requires: [deploy-backend, deploy-frontend]
    #  - cloudfront-update:
    #      requires: [smoke-test]
    #  - cleanup:
    #      requires: [cloudfront-update]